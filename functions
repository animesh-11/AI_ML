"""
Write a program to find  Greatest Common Divisor (GCD) of Two Positive Numbers.
The Greatest Common Divisor (GCD) of two positive integers is the largest positive number that divides both numbers exactly without leaving a remainder.
"""

# Taking input
num1 = int(input())
num2 = int(input())

def gcd(a, b):
  a = abs(a)
  b = abs(b)
  if (a == 0):
    return b
  elif (b == 0):
    return a
  if (a > b):
    small = b
  else:
    small = a
  gcd_val = 1
  for i in range(1, small + 1):
    if ((a % i == 0) and (b % i == 0)):
      gcd_val = i
  return gcd_val

print(gcd(num1, num2))

"""
Write a program to find whether a number is prime or not.
"""

# Taking input
num = int(input())

def is_prime(n):
  if n <= 1:
    return "Not Prime"
  else:
    for i in range(2,n+1):
      if n % i == 0:
        if n == i:
          return "Prime"
        else:
          return "Not Prime"


# Print the output
print(is_prime(num))


"""
Write a program to classify input as triangle.
"""

# Taking input
side1 = int(input())
side2 = int(input())
side3 = int(input())

def classify_triangle(a, b, c):
  if (a,b,c >= 1) and (a,b,c <= 10**9):
    if (a + b > c) and (a + c > b) and (b + c > a):
      if a == b == c:
        return "Equilateral"
      elif (a==b) or (b==c) or (a==c):
        return "Isosceles"
      else:
        return "Scalene"
    else:
      return "Not a Triangle"
  else:
      return "Not a Triangle"


# Print the output
print(classify_triangle(side1, side2, side3))


"""
Write a function 'traffic_light_action(color)' that simulates a simple traffic light system with three colors: 'red', 'yellow', and 'green'.

The function should print the corresponding action for each color:

 "red": Print "Stop"
"yellow": Print "Prepare to stop"
"green": Print "Go"
If the input color is invalid, print "Invalid color".
"""
# Taking input
color = input()

def traffic_light_action(color):
  if color == "red":
    return "Stop"
  elif color == "yellow":
    return "Prepare to stop"
  elif color == "green":
    return "Go"
  else:
    return "Invalid color"
     
# Print the output
traffic_light_action(color)


"""
Write a program to find eligibility of citizenship
"""

# Taking input
age = int(input())
citizenship_input = input()

def is_eligible_to_vote(age, citizenship_input):
    if (age >= 18):
      if citizenship_input == "Yes":
        citizenship = True
      elif citizenship_input == "No":
        citizenship = False
      elif citizenship_input == "True":
        citizenship = True
      elif citizenship_input == "False":
        citizenship = False
    else:
      citizenship = False
      
    return citizenship
    
# Print the output
print(is_eligible_to_vote(age, citizenship_input))

"""
Write a program to reverse a number
"""

# Taking input
num = int(input())

def reverse_number(n):
  rev = 0
  while n > 0:
    digit = n % 10
    rev = rev * 10 + digit
    n = n // 10
  return rev
    
    
# Print the output
print(reverse_number(num))


"""
Write a program to print Pyramid patterns of number where each row contains the row number repeated
"""

# Taking input
n = int(input())

def print_pyramid(n):
  for i in range(1, n + 1):
        for j in range(i):
            print(i, end='')
        print() 
     
# Print the output
print_pyramid(n)

"""
Write a program to return differnce between square of sum and sum of squares
"""

# Taking input
n = int(input())

def difference_sum_squares(n):
    sum_of_squares = 0
    sqaure_of_sum = 0
    if (n >= 1) and (n <= 10**6):
        for i in range(1,n+1):
            sum_of_squares = sum_of_squares + i*i
        for i in range(1,n+1):
            sqaure_of_sum = sqaure_of_sum + i
        sqaure_of_sum = sqaure_of_sum * sqaure_of_sum
    return sqaure_of_sum - sum_of_squares

    
# Print the output
print(difference_sum_squares(n))

"""
Define a Python function called digit_sum_single_digit that takes a non-negative integer n and repeatedly sums its digits until the result is a single digit.
"""

# Taking input
num = int(input())

def sum_until_single_digit(num):
    if (num > 0) and (num <= 10**9):
        while num > 9:
            digit_sum = 0
            for digit in str(num):
                digit_sum += int(digit)
                num = digit_sum
        return num
    else:
        return num

# Print the output
print(sum_until_single_digit(num))

"""
Write a Python function print_zigzag(n) that prints numbers from 1 to n in a zigzag pattern across three rows. The zigzag pattern follows this repeating cycle every 4 numbers: 1st number in row 1 2nd number in row 2 3rd number in row 3 4th number in row 2 Each number is followed by a space. Positions without a number should be filled with two spaces " " to maintain alignment.
"""

def print_zigzag(n):
    row1 = ""
    row2 = ""
    row3 = ""

    for i in range(1, n + 1):
        remainder = (i - 1) % 4
        if remainder == 0:
            row1 += str(i) + " "
            row2 += "  "
            row3 += "  "
        elif remainder == 1 or remainder == 3:
            row1 += "  "
            row2 += str(i) + " "
            row3 += "  "
        elif remainder == 2:
            row1 += "  "
            row2 += "  "
            row3 += str(i) + " "

    print(row1)
    print(row2)
    print(row3)

# Example usage:
print_zigzag(10)

"""
Write a Python function 'decimal_to_binary(num)' that converts a Non-Negative Decimal Integer number to its Binary representation as a String.
"""
def decimal_to_binary(num):
    if num < 0:
        return "Input must be a non-negative integer."
    if num == 0:
        return "0"

    binary = ""
    while num > 0:
        remainder = num % 2
        binary = str(remainder) + binary
        num = num // 2
    return binary

"""
Write a program to check whether a given number is a Strong Number or not.
"""
# Taking input
n=int(input())

def factorial(n):
   if n == 0:
      return 1
   else:
      result = 1
      for i in range(1, n + 1):
         result *= i
      return result

def is_strong_number(number):
   if number < 0:
      return "Input must be a non-negative integer."
   original_num = number
   sum_of_factorials = 0
   temp = number

   if number == 0:
        sum_of_factorials = factorial(0)
   else:
      while temp > 0:
         digit = temp % 10
         sum_of_factorials += factorial(digit)
         temp //= 10

   if sum_of_factorials == original_num:
      return True
   else:
      return False


# Print the output 
print(is_strong_number(n))


"""
Write a recursive function to calculate the sum of the digits of a given number.
"""

# Taking input
n = int(input())

def sum_of_digits(n):
    if (n >= 0) and (n <= 100000):
        # Base case: if n is a single digit (0-9)
        if n < 10:
            return n
        else:
            # Recursive step: sum of last digit and sum of remaining digits
            return (n % 10) + sum_of_digits(n // 10)
       
# Print the output
print(sum_of_digits(n))
